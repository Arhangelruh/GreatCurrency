// <auto-generated />
using System;
using GreatCurrency.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GreatCurrency.DAL.Migrations
{
    [DbContext(typeof(GreatCurrencyContext))]
    [Migration("20231122134534_AddTimeStampToCurrency")]
    partial class AddTimeStampToCurrency
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GreatCurrency.DAL.Models.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Bank", (string)null);
                });

            modelBuilder.Entity("GreatCurrency.DAL.Models.BankDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BankId")
                        .HasColumnType("integer");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("DepartmentAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CityId");

                    b.ToTable("BankDepartment", (string)null);
                });

            modelBuilder.Entity("GreatCurrency.DAL.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CityURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("GreatCurrency.DAL.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BankDepartmentId")
                        .HasColumnType("integer");

                    b.Property<double>("EURBuyRate")
                        .HasColumnType("double precision");

                    b.Property<double>("EURSaleRate")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("IncomingDate")
                        .HasColumnType("Timestamp");

                    b.Property<double>("RUBBuyRate")
                        .HasColumnType("double precision");

                    b.Property<double>("RUBSaleRate")
                        .HasColumnType("double precision");

                    b.Property<double>("USDBuyRate")
                        .HasColumnType("double precision");

                    b.Property<double>("USDSaleRate")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BankDepartmentId");

                    b.ToTable("Currency", (string)null);
                });

            modelBuilder.Entity("GreatCurrency.DAL.Models.BankDepartment", b =>
                {
                    b.HasOne("GreatCurrency.DAL.Models.Bank", "Bank")
                        .WithMany("BankDepartments")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GreatCurrency.DAL.Models.City", "City")
                        .WithMany("BankDepartments")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("City");
                });

            modelBuilder.Entity("GreatCurrency.DAL.Models.Currency", b =>
                {
                    b.HasOne("GreatCurrency.DAL.Models.BankDepartment", "BankDepartment")
                        .WithMany("Currencies")
                        .HasForeignKey("BankDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankDepartment");
                });

            modelBuilder.Entity("GreatCurrency.DAL.Models.Bank", b =>
                {
                    b.Navigation("BankDepartments");
                });

            modelBuilder.Entity("GreatCurrency.DAL.Models.BankDepartment", b =>
                {
                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("GreatCurrency.DAL.Models.City", b =>
                {
                    b.Navigation("BankDepartments");
                });
#pragma warning restore 612, 618
        }
    }
}
